/**
 COPYRIGHT (C) 2015 Scot Matson. All Rights Reserved

 Code Review and Performance Report

 Solves CS147 Homework Assignment #04

 @author Scot Matson
 */

This assignment gave me insight to the ShellSort algorithm and how it has evolved
from the InsertionSort algorithm. Furthermore it is interesting to see how many
variations of the ShellSort algorithm exist; this became apparent when researching
how to develop Knuth's ShellSort algorithm. I actually experimented with a few
variations at first, such as the Hibbard ShellSort which has a runtime complexity
of (2^k-1). I knew that Knuth's ShellSort was (3^k-1)/2 so thought I would be able
to use a similarly devised algorithm and adapt it to meet my needs. I used this
approach because Knuth's algorithm is not as widely published on the internet as
Hibbard's ShellSort or Shell's ShellSort. This adaptation unfortunately did not
give the expected results and eventually I did find a snippet of Knuth's ShellSort
which I modified to have a consistent coding style and naming convention to the
ShellSort that Weiss offers up in his text.

Aside from being exposed to these algorithms and taking the time to read through
the code I still find myself uncertain by their complexity... or perhaps simplicity.
Algorithms and mathematical concepts have never been my forte. I have reviewed various
visualizations which have helped given me insight to the inner-workings of these two
sorting algorithms, and while the InsertionSort does make sense to me, I still remain
confounded by the functionality of the ShellSort. An interesting conclusion about the
appropriately named ShellSort is that the outer loop does in fact appear to encapsulate
the inner InsertionSort, therefore creating a shell around it. I think making these
connections will help me better understand how to develop this algorithm without
using a reference as well as understand better how the ShellSort is influencing the
InsertionSort.

The areas that I invested a great deal of time into were the bits of code that were not
readily made available to me. Specifically the testing environment. A key component
to this assignment was designing a platform for optimized code reuse and so my approach
in the beginning was very verbose and based around function rather than modularity. But,
as code began to run and produce the appropriate output I started considering how I could
group areas of similar functionality into singular looping statements. To accomplish this
I first began replicating Dr. Mak's output file into String Arrays that I loop through.
It was easy to see how three looping statements existed in the test, an outer header, a
middle Nth value, and an inner row sort test. The real win was realizing that an interface
could be used to tie these sorting algorithms together. I was also having problems when
creating a number generator as I had attempted to simply use Arrays as well, it turned out that
I was over-thinking that part and what I really needed was a switch statement to trigger the
proper methods.

Reviewing the output, it is obvious that the InsertionSort by itself is highly inefficient,
not producing any redeeming results while the two ShellSort algorithms were competing
neck and neck. The Knuth algorithm in the end managed to have a leg up in all phases
of testing and as we can see, as N continues to grow larger the Knuth algorithm will
produce far better results when compared to both the Suboptimal ShellSort and the
InsertionSort. It seems that the advantage that the Knuth ShellSort had gained extended
from not having to make as many comparisons; while it did make fewer moves the difference
was not as great.