/**
 COPYRIGHT (C) 2015 Scot Matson. All Rights Reserved

 Code Review and Performance Report

 Solves CS147 Homework Assignment #05

 @author Scot Matson

 @version 2015/07/19
 */

Beginning the second half of this assignment was a bitter sweet experience. Sweet
because I had set my code up (in my opinion) very well to accomodate changes easily.
Adding additional methods and headings for presentation required very little
additional code. Bitter because while working on the first sorting algorithm (Heap sort),
I came across a subtle but quite nasty bug. While the bug did not heavily alter the results
of the previous assignment, it was quite noticable when working with the newer
sorting algorithms. The cause of my problems stemmed from my Fisher-Yates shuffle
in my NumberGenerator class. It turns out during the swap I had been assigning
temp has an array, rather than as the stored value. This bug created quite a bit
of duplication and by the 4th pass - which is when Heap sort was running - I noticed
the array had only consisted of one repeated single integer.

Once the bug from the old code was correct it made it incredibly easy to push
forward. As before I adapted much of my new code from the Weiss book as I could since
he really pushes for the use of generics. Coding in this style I've noticed is quite
popular, while T or E tends to be used more often rather than AnyType. The difficulties
of this coding style arise when borrowing code snippets from sources outside of the
Weiss text which was necessary when trying to understanding and implement the Quicksort
as well as the LinkedList Merge Sort.

When it comes to the Heap sort, I am still not comfortable with implementing this code
without references, ok this is likely true for all of the sorting algorithms. The heap sort
though required very little time to drop into place since it was completely derived from the
text. The Merge Sort I am familiar with somewhat already but still opted to utilize code from
the text to keep things consistent. I found that the code used by Weiss is very similar to
other sources that I've come across and my own implementations I have performed in the past.
I held off on developing the LinkedList Merge Sort until the very end of the assignment as
I believed it would require more of my time, which it did.

I found various implementation of the Linked List Merge Sort but all of them required major
work to 'play nice' with my code base. The source I ended up using was very readable and
easy to follow in my opinion but a major function of the algorithm was poorly implemented -
sorting the array into individual lists. It took perhaps two hours of generating diagrams
and playing with the debugger before I was able to implement a working solution that was
based off of Dr. Mak's suggestion in class - Traversing the list a single time and
alternately placing Nodes into two new lists. What held me up while developing this
section was forgetting the nature of pointers. I constantly threw NullPointerExceptions and
StackOverFlow's. It was through heavy use of the debugger that I was able to see the problem
and realize a solution. As is the nature of the MergeSort, I was not assigning new Node() values,
but rather assigning Nodes that were pointers to existing nodes, thus creating infinite loops and
having StackOverFlow occurrences.

The Quicksort algorithm, optimal and suboptimal were not much different from one another
and for the most part gave me little complication. The code was a blend of Weiss's
median of three method and a very well documented Quicksort that I located online.
Implementing the Quicksort made me realize that I really didn't understand how the pivot
was working and as it turns out, I was over-thinking it. The suboptimal pivot was literally
as simple as setting the array to the lowest index ( NOT 0!!! ). I made the mistake of
using the 0 index which threw NullPointerExceptions. Because I was not expecting this
behavior it turned out to be somewhat troublesome to correct. Bug corrections however
have greatly helped my false understandings of how many of these algorithms work.

Throughout the process of development I found it very difficult to produce the correct
Stats that matched the instructor's output. While some variation might be expected, I
often noted that I would output the expect same values. This gave me expectations that
I should be able then to match the instructor values for each algorithm but as the
algorithms became increasingly complex in nature I was routinely finding my results to
under or over shoot frequently. This does not reflect the algorithm itself as the
milliseconds were all as they should be but rather the comparisons and the moves. I'm
afraid I'm not quite sure where I should be incrementing values and this could either
be a difference of implementation or perhaps my lack of understanding of when these
events are taking place.

The final change I made to this assignment was additional functionality to make
my life easier while generating output. I used an ENUM and set up a number of
conditional statements throughout my tester file to check a flag that determines
if the output will be to the console or to a text file.

