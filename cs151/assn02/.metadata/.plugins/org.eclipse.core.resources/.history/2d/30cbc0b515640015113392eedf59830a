import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

enum View {
   MONTH, DAY;
}

public class Planner
{  
   private final String EVENTS_FILE;
   private Calendar calendar;
   private View view;
   private List<Event> events;

   public Planner(Calendar calendar)
   {
      this.EVENTS_FILE = "events.txt";
      this.view = View.MONTH;
      this.events = new ArrayList<>();
      
      // Default calendar set for 'today'.
      this.calendar = calendar;
   }
   
   /**
    * Constructor method.
    */
   public Planner(Calendar calendar, String filename)
   {
      this.EVENTS_FILE = filename;
      this.view = View.MONTH;
      this.events = new ArrayList<>();
      
      // Default calendar set for 'today'.
      this.calendar = calendar;
   }
   
   public void loadEvents()
   {
      // Load events from the file
      // and turn them into objects
      try 
      {
         BufferedReader br = new BufferedReader(new FileReader(EVENTS_FILE));
      }
      catch (FileNotFoundException fnfe)
      {
         System.out.printf("%s", "Unable to locate events.txt.");
      }
      
   }
   
   public void toggleView()
   {

   }
   
   public void createEvent(Date date, String title, String description)
   {
      Event e = new Event(date, title, description);
   }
   
   public void goToEvent()
   {
      
   }
   
   public void listEvents()
   {
      
   }
   
   public void deleteEvent()
   {
      
   }

   public void saveEvents()
   {
      // Write events to events.txt
   }
   
   public void nextMonth() {
      calendar.add(Calendar.MONTH, 1);
   }
   
   public void previousMonth() {
      calendar.add(Calendar.MONTH, -1);
   }
   
   /**
    * Prints the calendar month but does not yet take into account EVENTS!!!
    */
   private void printCalendarByMonth()
   {  
      // Make a defensive copy
      Calendar tmp = Calendar.getInstance();
      tmp.setTimeInMillis(calendar.getTimeInMillis());
      
      // Set the calendar to the first day of the month.
      tmp.set(Calendar.DATE, tmp.getActualMinimum(Calendar.DATE));
      
      // Store the last day of the current month.
      int lastDate = tmp.getActualMaximum(Calendar.DATE);
            
      // Store month/year
      // Locale.getDefault() returns the locale for the Java environment,
      // not the system environment. Ideally we would want the system locale.
      String month = tmp.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault());
      int year = tmp.get(Calendar.YEAR);
      
      // Print calendar header.
      System.out.printf(" %s %s\n", month, year);
      System.out.printf("%s\n", "Su Mo Tu We Th Fr Sa");
      
      // Sunday(1) - Saturday(7)
      int weekdayIndex;
      // First weekday of the month
      int firstWeekday = tmp.get(Calendar.DAY_OF_WEEK);
      
      // Buffer first weekday of the month
      for (weekdayIndex = 1; weekdayIndex < firstWeekday; ++weekdayIndex)
      {
         System.out.print("   ");
      }
      
      // Set counter for row wrapping.
      weekdayIndex = firstWeekday;
      for (int i = 1; i <= lastDate; ++i, ++weekdayIndex)
      {
         // May be able to wrap dates here for event days.
         
         if (weekdayIndex % 7 == 0)
         {
            System.out.printf("%2d\n", i);
         }
         else {
            System.out.printf("%2d ", i);
         }
      }
      System.out.printf("\n\n");
   }
   
   private void printCalendarByDay()
   {
      // Set calendar to today's date.
      Date today = new Date();
      calendar.setTime(today);
      
      // Print Day, Month, Year format
      
   }
   
   public void setMonthView()
   {
      view = View.MONTH;
   }
   
   public void printCalendar()
   {
      if (view == View.MONTH)
      {
         this.printCalendarByMonth();
      }
      else 
      {
         this.printCalendarByDay();
      }
   }
   
   public void setDayView()
   {
      view = View.DAY;
   }
}
