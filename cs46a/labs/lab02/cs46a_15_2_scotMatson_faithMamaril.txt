Section 15
  Part A:
    01. Done.
    02. Done.
    03. Done.
    04. Done.
    05. Done.
    06. Done.
    07. Done.
    08. Done.
    09. Done.
    10. Done.
    11. Done.
    12. Done.
    13. Done.
    14. Done.
    15. Done.

  Part B:
    01. Done.
    02. Done.
    03. Done.
    04. The project is populated with class files.
    05. A new object 'red blob' is created named rectangle1.
    06. A canvas appears and displays the image of a rectangle.
    07. The second rectangle was constructed using the same process as
        the first. 1) Right click on the Rectangle class. 2) Instantiate
        a new Rectangle - but this time with the following arguments - 
        30, 10, 20, 30. Display by using the draw method on the newly 
        created rectangl2 object.
    08. The rectangl1 object has relocated to the lower right region
        of the canvas.
    09. The rectangl1 object has grown substantially in size, taking 
        up roughly 3/4 of the canvas area.
    10. Using the grow() method once again, only this time with
        the arguments (-50, -25).

  Part C:
    01. Done.
    02. Using ctrl+space while coding in an IDE will generate the
        autocompletion feature which presents all the methods
        associated with the class object.
    03. To make Fred move we should use the moveforward() method
        of the Robot class.
    04. Using autocompletion on name which is an object of the
        String class, we are presented once again with a list
        available methods which may be used on the name object.
    05. Typing the letter 't' while the autocompletion tool
        is active, the search is suddenly narrowed to only methods
        which begin with the letter 't'.
    06. The method to modify the name object to have only uppercased
        letters is toUpperCase() and uses camel cased syntax.
    07. Similarly to the previous question, if we use the fred
        object and invoke autocompletion, then type the letter 't',
        we are presented with the methods which can turn Fred.
        turnLeft() and turnRight().
    08. Fred appears on the canvas and begins moving about given
        the instructions I have entered in for him.
    09. fred.moveForward();
        fred.turnRight();
        fred.moveForward();
        fred.turnRight();
        fred.moveForward();
        fred.turnRight();
        fred.turnRight();
    10. The JavaDocs are opened giving me organzed detailed information
        to the members of the classes available to my project.
    12. In the Robots class if I change the argument of the
        instantiated Picture class to a new image then the image of my
        robot will change. The next time I compile and run my project.
    13. I am indifferent to the Roomba, but I suppose visually it is
        more appealing since the image no longer overlaps.
    14. Yes. In the Robots class you can set snapshots to false.
    15. It depends on the effect you are attempting to achieve. 
        For a game this would be an improvement if used with
        character movements but probably not desired if used with
        particle effects.
    16. The source is the same as it was on question #09. The changes that
        were made were in the Robot class file which would be:
        snapshots = false

    16.
